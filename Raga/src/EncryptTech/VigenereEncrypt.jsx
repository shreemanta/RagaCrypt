import React, { useState } from "react";
import { Link } from "react-router-dom";
import "../EncryptTech/EncryptTech.css";
import bgImg from "../assets/bg2.jpg";
import jsPDF from "jspdf";

const VigenereEncrypt = () => {
  const [message, setMessage] = useState("");
  const [key, setKey] = useState("");
  const [output, setOutput] = useState("");
  const [steps, setSteps] = useState([]);
  const [showOutput, setShowOutput] = useState(false);

  const handleEncrypt = (e) => {
    e.preventDefault();

    const text = message.toUpperCase().replace(/[^A-Z]/g, "");
    const keyword = key.toUpperCase().replace(/[^A-Z]/g, "");

    if (!text || !keyword) {
      alert("Please enter valid plaintext and key.");
      return;
    }

    let fullKey = "";
    while (fullKey.length < text.length) {
      fullKey += keyword;
    }
    fullKey = fullKey.slice(0, text.length);

    let result = "";
    const stepByStep = [];

    for (let i = 0; i < text.length; i++) {
      const msgChar = text[i];
      const keyChar = fullKey[i];

      const msgCode = msgChar.charCodeAt(0) - 65;
      const keyCode = keyChar.charCodeAt(0) - 65;
      const encryptedCode = (msgCode + keyCode) % 26;
      const encryptedChar = String.fromCharCode(encryptedCode + 65);

      result += encryptedChar;

      stepByStep.push(
        `Step ${
          i + 1
        }: '${msgChar}' (index ${msgCode}) + '${keyChar}' (index ${keyCode}) = ${encryptedCode} ‚Üí '${encryptedChar}'`
      );
    }

    setOutput(result);
    setSteps(stepByStep);
    setShowOutput(true);
  };
  // ‚úÖ Generate Stylish / Trendy PDF
const handleDownloadPDF = () => {
  try {
    const doc = new jsPDF();
    const pageHeight = doc.internal.pageSize.height;
    const pad = 20;
    let y = 24;
    const lineGap = 8;
    const sectionGap = 14;

    // helper for writing paragraphs
    const write = (txt, size = 11, color = [0, 0, 0]) => {
      doc.setFontSize(size);
      doc.setTextColor(...color);
      const lines = doc.splitTextToSize(txt, 170);
      lines.forEach((line) => {
        if (y > pageHeight - 30) {
          doc.addPage();
          y = 24;
        }
        doc.text(line, pad, y);
        y += lineGap;
      });
    };

    // helper for section titles
    const writeSectionTitle = (txt) => {
      if (y + 10 > pageHeight - 20) {
        doc.addPage();
        y = 24;
      }
      doc.setFontSize(14);
      doc.setTextColor(17, 122, 101); // teal green
      doc.text(txt, pad, y);
      y += sectionGap;
      doc.setDrawColor(17, 122, 101);
      doc.setLineWidth(0.5);
      doc.line(pad, y - 7, 190 - pad, y - 7);
    };

    // -------- Header Card --------
    doc.setDrawColor(46, 134, 193);
    doc.setFillColor(240, 248, 255);
    doc.roundedRect(pad - 5, y - 14, 170, 20, 3, 3, "F");
    doc.setFontSize(16);
    doc.setTextColor(46, 134, 193);
    doc.setFont("helvetica", "bold");
    doc.text("Vigen√®re Cipher ‚Äî Encryption Walkthrough", pad, y);
    y += 24;

    // -------- Input Details --------
    writeSectionTitle("Input Details");
    write(`Original Message: ${message.toUpperCase()}`);
    write(`Key: ${key.toUpperCase()}`);

    // -------- Step-by-Step --------
    writeSectionTitle("Step-by-Step Process");
    steps.forEach((step, index) => {
      const text = `${index + 1}. ${step}`;
      doc.setFontSize(11);
      doc.setTextColor(52, 73, 94);
      const split = doc.splitTextToSize(text, 170);
      split.forEach((line) => {
        if (y > pageHeight - 30) {
          doc.addPage();
          y = 24;
        }
        doc.text(line, pad, y);
        y += lineGap;
      });
      y += 4; // space between steps
    });

    // -------- Final Result --------
    writeSectionTitle("Final Encrypted Message");
    doc.setFont("courier", "bold");
    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    doc.text(output || "‚Äî", pad, y + 6);
    y += 20;

    // -------- Footer --------
    if (y + 16 > pageHeight) {
      doc.addPage();
      y = 24;
    }
    doc.setFontSize(9);
    doc.setTextColor(120, 120, 120);
    doc.text("Generated by RagaCrypt ‚Ä¢ Vigen√®re Cipher Report", pad, pageHeight - 10);

    doc.save("VigenereCipher.pdf");
  } catch (err) {
    console.error(err);
    alert("PDF generation failed. Check console for details.");
  }
};

  return (
    <div className="cipher-page">
      <div
        className="cipher-bg"
        style={{ backgroundImage: `url(${bgImg})` }}
      ></div>
      <div className="cipher-overlay"></div>

      <div
        className={`cipher-content-wrapper ${showOutput ? "show-output" : ""}`}
      >
        {/* Left Side (Form + Explanation) */}
        <div className="left-section">
          <div className="cipher-content">
            <h1>üîê Vigen√®re Cipher Encryption</h1>
            <p>
              Use a repeating keyword to shift letters and encrypt your message
              with elegance and complexity.
            </p>

            <form onSubmit={handleEncrypt} className="cipher-form">
              <input
                type="text"
                placeholder="Enter Plaintext"
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                required
              />
              <input
                type="text"
                placeholder="Enter Key (e.g. KEY)"
                value={key}
                onChange={(e) => setKey(e.target.value)}
                required
              />
              <button type="submit">Encrypt Message</button>
            </form>

            <section className="explanation">
              <h3>üìö How It Works</h3>
              <p>
                The Vigen√®re Cipher uses a keyword to encrypt each letter of the
                message. The keyword repeats to match the message length.
              </p>
              <p>
                Each letter is shifted using the corresponding letter in the
                key. For example:
                <br />
                <code>HELLO (key: KEY) ‚Üí RIJVS</code>
              </p>
            </section>

            <div className="next-technique">
              <p>‚û°Ô∏è Ready for the next cipher?</p>
              <Link to="/encrypt/railfence" className="next-link">
                Try Rail Fence Cipher ‚Üí
              </Link>
            </div>
          </div>
        </div>

        {/* Right Side (Output) */}
        {showOutput && (
          <div className="right-section">
            <h2>üß† Step-by-Step Explanation</h2>
            <div className="white-output-box">
              <p>
                Let's go through the encryption step by step. We clean your
                input and repeat the key to match the message length.
              </p>
              <ul className="step-list">
                {steps.map((step, index) => (
                  <li key={index}>{step}</li>
                ))}
              </ul>
              <div className="final-encryption-box">
                Final Encrypted Message: {output}
              </div>
              <button onClick={handleDownloadPDF} className="pdf-btn">
                üìÑ Download PDF
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default VigenereEncrypt;
