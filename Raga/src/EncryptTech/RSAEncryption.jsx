import React, { useState } from "react";
import { Link } from "react-router-dom";
import jsPDF from "jspdf";
import "../EncryptTech/EncryptTech.css";
import rsaBg from "../assets/bg2.jpg";
import { saveHistory } from "../utils/saveHistory";

// Helper function for modular exponentiation
const modPow = (base, exponent, modulus) => {
  let result = 1n;
  base = base % modulus;
  while (exponent > 0n) {
    if (exponent % 2n === 1n) result = (result * base) % modulus;
    exponent = exponent / 2n;
    base = (base * base) % modulus;
  }
  return result;
};

const RSAEncrypt = () => {
  const [message, setMessage] = useState("");
  const [publicKey, setPublicKey] = useState({ e: "", n: "" });
  const [steps, setSteps] = useState([]);
  const [finalResult, setFinalResult] = useState("");

  const handleEncrypt = (e) => {
  e.preventDefault();

  const eVal = BigInt(publicKey.e);
  const nVal = BigInt(publicKey.n);

  if (!eVal || !nVal) {
    setFinalResult("‚ö†Ô∏è Please enter valid public key values.");
    return;
  }

  let encryptedArr = [];
  let explanationSteps = [];

  for (let i = 0; i < message.length; i++) {
    const charCode = BigInt(message.charCodeAt(i));
    const encryptedChar = modPow(charCode, eVal, nVal);
    encryptedArr.push(encryptedChar.toString());

    explanationSteps.push({
      id: i + 1,
      content:
        `Step ${i + 1}: Character "${message[i]}" has ASCII ${charCode}. ` +
        `Encrypted using RSA formula c = m^e mod n: c = ${charCode}^${eVal} mod ${nVal} = ${encryptedChar}`,
    });
  }

  const cipherResult = encryptedArr.join(" "); // ‚úÖ define it here

  saveHistory({
    type: "RSA Cipher",
    action: "Encryption",
    input: message,
    key: `(${publicKey.e}, ${publicKey.n})`,
    output: cipherResult,
  });

  setFinalResult(cipherResult);
  setSteps(explanationSteps);
};


  const handleDownloadPDF = () => {
    try {
      const doc = new jsPDF();
      const pageHeight = doc.internal.pageSize.height;
      const pad = 20;
      let y = 24;
      const lineGap = 8;
      const sectionGap = 14;

      const write = (txt, size = 11, color = [0, 0, 0]) => {
        doc.setFontSize(size);
        doc.setTextColor(...color);
        const lines = doc.splitTextToSize(txt, 170);
        lines.forEach((line) => {
          if (y > pageHeight - 30) {
            doc.addPage();
            y = 24;
          }
          doc.text(line, pad, y);
          y += lineGap;
        });
      };

      const writeSectionTitle = (txt) => {
        if (y + 10 > pageHeight - 20) {
          doc.addPage();
          y = 24;
        }
        doc.setFontSize(14);
        doc.setTextColor(17, 122, 101);
        doc.text(txt, pad, y);
        y += sectionGap;
        doc.setDrawColor(17, 122, 101);
        doc.setLineWidth(0.5);
        doc.line(pad, y - 7, 190 - pad, y - 7);
      };

      // Header
      doc.setDrawColor(46, 134, 193);
      doc.setFillColor(240, 248, 255);
      doc.roundedRect(pad - 5, y - 14, 170, 20, 3, 3, "F");
      doc.setFontSize(16);
      doc.setTextColor(46, 134, 193);
      doc.setFont("helvetica", "bold");
      doc.text("RSA Cipher ‚Äî Encryption Walkthrough", pad, y);
      y += 24;

      // Input Details
      writeSectionTitle(" Input Details");
      write(`Original Message: ${message}`);
      write(`Public Key (e, n): (${publicKey.e}, ${publicKey.n})`);

      // Steps
      writeSectionTitle(" Step-by-Step Process");
      steps.forEach((step, index) => {
        const text = `${index + 1}. ${step.content}`;
        doc.setFontSize(11);
        doc.setTextColor(52, 73, 94);
        const split = doc.splitTextToSize(text, 170);
        split.forEach((line) => {
          if (y > pageHeight - 30) {
            doc.addPage();
            y = 24;
          }
          doc.text(line, pad, y);
          y += lineGap;
        });
        y += 4;
      });

      // Final Result
      writeSectionTitle(" Final Encrypted Message");
      doc.setFont("courier", "bold");
      doc.setFontSize(12);
      doc.setTextColor(0, 0, 0);
      doc.text(finalResult || "‚Äî", pad, y + 6);
      y += 20;

      // Footer
      if (y + 16 > pageHeight) {
        doc.addPage();
        y = 24;
      }
      doc.setFontSize(9);
      doc.setTextColor(120, 120, 120);
      doc.text(
        "Generated by RagaCrypt ‚Ä¢ RSA Cipher (Classic Crypto)",
        pad,
        pageHeight - 10
      );

      doc.save("RSACipher.pdf");
    } catch (err) {
      console.error(err);
      alert("PDF generation failed. Check console for details.");
    }
  };

  return (
    <div className="cipher-page">
      <div
        className="cipher-bg"
        style={{ backgroundImage: `url(${rsaBg})` }}
      ></div>
      <div className="cipher-overlay"></div>

      <div
        className={`cipher-content-wrapper ${finalResult ? "show-output" : ""}`}
      >
        {/* Left Input Section */}
        <div className="left-section">
          <div className="cipher-content">
            <h1>üîê RSA Encryption</h1>
            <p>
              RSA is a public-key encryption method. Each character is encrypted
              using the formula: c = m^e mod n, where m is the ASCII of the
              character.
            </p>

            <form onSubmit={handleEncrypt} className="cipher-form">
              <input
                type="text"
                placeholder="Enter Plaintext"
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                required
              />
              <input
                type="number"
                placeholder="Enter Public Key e"
                value={publicKey.e}
                onChange={(e) =>
                  setPublicKey({ ...publicKey, e: e.target.value })
                }
                required
              />
              <input
                type="number"
                placeholder="Enter Public Key n"
                value={publicKey.n}
                onChange={(e) =>
                  setPublicKey({ ...publicKey, n: e.target.value })
                }
                required
              />
              <button type="submit">Encrypt Message</button>
            </form>

            <section className="explanation">
              <h3>üìö How It Works</h3>
              <p>
                Each character is converted to its ASCII code and encrypted
                using the RSA formula. The result is a sequence of numbers that
                represent the encrypted message.
              </p>
            </section>

            <div className="next-technique">
              <p>‚û°Ô∏è Ready for the next cipher?</p>
              <Link to="/encrypt/columnar" className="next-link">
                Try Column Transposition Cipher ‚Üí
              </Link>
            </div>
          </div>
        </div>

        {/* Right Output Section */}
        {finalResult && (
          <div className="right-section white-output-box">
            <h2>üîè Encrypted Output</h2>
            <p>
              <strong>Original Message:</strong> {message}
            </p>
            <p>
              <strong>Public Key:</strong> ({publicKey.e}, {publicKey.n})
            </p>

            <h3>üß† Step-by-Step Explanation</h3>
            <ul className="step-list">
              {steps.map((step) => (
                <li key={step.id}>{step.content}</li>
              ))}
            </ul>

            <h3>‚úÖ Final Encrypted Message:</h3>
            <div className="final-encryption-box">{finalResult}</div>
            <button onClick={handleDownloadPDF} className="pdf-btn">
              üìÑ Download PDF
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default RSAEncrypt;
