import React, { useState } from "react";
import { Link } from "react-router-dom";
import jsPDF from "jspdf";
import "../EncryptTech/EncryptTech.css";
import rsaBg from "../assets/bg2.jpg";

// Helper function for modular exponentiation
const modPow = (base, exponent, modulus) => {
  let result = 1n;
  base = base % modulus;
  while (exponent > 0n) {
    if (exponent % 2n === 1n) result = (result * base) % modulus;
    exponent = exponent / 2n;
    base = (base * base) % modulus;
  }
  return result;
};

const RSADecrypt = () => {
  const [cipherText, setCipherText] = useState("");
  const [privateKey, setPrivateKey] = useState({ d: "", n: "" });
  const [steps, setSteps] = useState([]);
  const [finalResult, setFinalResult] = useState("");

  const handleDecrypt = (e) => {
    e.preventDefault();

    const dVal = BigInt(privateKey.d);
    const nVal = BigInt(privateKey.n);

    if (!dVal || !nVal) {
      setFinalResult("‚ö†Ô∏è Please enter valid private key values.");
      return;
    }

    const cipherArr = cipherText.split(" ").map(BigInt);
    let decryptedArr = [];
    let explanationSteps = [];

    cipherArr.forEach((c, i) => {
      const decryptedCharCode = modPow(c, dVal, nVal);
      decryptedArr.push(String.fromCharCode(Number(decryptedCharCode)));

      explanationSteps.push({
        id: i + 1,
        content: `Step ${i + 1}: Cipher "${c}" decrypted using formula m = c^d mod n: m = ${c}^${dVal} mod ${nVal} = ${decryptedCharCode} ‚Üí Character "${String.fromCharCode(Number(decryptedCharCode))}"`,
      });
    });

    setFinalResult(decryptedArr.join(""));
    setSteps(explanationSteps);
  };

  const handleDownloadPDF = () => {
    try {
      const doc = new jsPDF();
      const pageHeight = doc.internal.pageSize.height;
      const pad = 20;
      let y = 24;
      const lineGap = 8;
      const sectionGap = 14;

      const write = (txt, size = 11, color = [0, 0, 0]) => {
        doc.setFontSize(size);
        doc.setTextColor(...color);
        const lines = doc.splitTextToSize(txt, 170);
        lines.forEach((line) => {
          if (y > pageHeight - 30) {
            doc.addPage();
            y = 24;
          }
          doc.text(line, pad, y);
          y += lineGap;
        });
      };

      const writeSectionTitle = (txt) => {
        if (y + 10 > pageHeight - 20) {
          doc.addPage();
          y = 24;
        }
        doc.setFontSize(14);
        doc.setTextColor(17, 122, 101);
        doc.text(txt, pad, y);
        y += sectionGap;
        doc.setDrawColor(17, 122, 101);
        doc.setLineWidth(0.5);
        doc.line(pad, y - 7, 190 - pad, y - 7);
      };

      // Header
      doc.setDrawColor(46, 134, 193);
      doc.setFillColor(240, 248, 255);
      doc.roundedRect(pad - 5, y - 14, 170, 20, 3, 3, "F");
      doc.setFontSize(16);
      doc.setTextColor(46, 134, 193);
      doc.setFont("helvetica", "bold");
      doc.text("RSA Cipher ‚Äî Decryption Walkthrough", pad, y);
      y += 24;

      // Input Details
      writeSectionTitle(" Input Details");
      write(`Cipher Text: ${cipherText}`);
      write(`Private Key (d, n): (${privateKey.d}, ${privateKey.n})`);

      // Steps
      writeSectionTitle(" Step-by-Step Process");
      steps.forEach((step, index) => {
        const text = `${index + 1}. ${step.content}`;
        doc.setFontSize(11);
        doc.setTextColor(52, 73, 94);
        const split = doc.splitTextToSize(text, 170);
        split.forEach((line) => {
          if (y > pageHeight - 30) {
            doc.addPage();
            y = 24;
          }
          doc.text(line, pad, y);
          y += lineGap;
        });
        y += 4;
      });

      // Final Result
      writeSectionTitle(" Final Decrypted Message");
      doc.setFont("courier", "bold");
      doc.setFontSize(12);
      doc.setTextColor(0, 0, 0);
      doc.text(finalResult || "‚Äî", pad, y + 6);
      y += 20;

      // Footer
      if (y + 16 > pageHeight) {
        doc.addPage();
        y = 24;
      }
      doc.setFontSize(9);
      doc.setTextColor(120, 120, 120);
      doc.text(
        "Generated by RagaCrypt ‚Ä¢ RSA Cipher (Classic Crypto)",
        pad,
        pageHeight - 10
      );

      doc.save("RSADecrypted.pdf");
    } catch (err) {
      console.error(err);
      alert("PDF generation failed. Check console for details.");
    }
  };

  return (
    <div className="cipher-page">
      <div
        className="cipher-bg"
        style={{ backgroundImage: `url(${rsaBg})` }}
      ></div>
      <div className="cipher-overlay"></div>

      <div
        className={`cipher-content-wrapper ${finalResult ? "show-output" : ""}`}
      >
        {/* Left Input Section */}
        <div className="left-section">
          <div className="cipher-content">
            <h1>üîì RSA Decryption</h1>
            <p>
              RSA decryption uses the private key to recover the original message from cipher numbers.
            </p>

            <form onSubmit={handleDecrypt} className="cipher-form">
              <input
                type="text"
                placeholder="Enter Cipher Text (numbers separated by spaces)"
                value={cipherText}
                onChange={(e) => setCipherText(e.target.value)}
                required
              />
              <input
                type="number"
                placeholder="Enter Private Key d"
                value={privateKey.d}
                onChange={(e) => setPrivateKey({ ...privateKey, d: e.target.value })}
                required
              />
              <input
                type="number"
                placeholder="Enter Private Key n"
                value={privateKey.n}
                onChange={(e) => setPrivateKey({ ...privateKey, n: e.target.value })}
                required
              />
              <button type="submit">Decrypt Message</button>
            </form>

            <section className="explanation">
              <h3>üìö How It Works</h3>
              <p>
                Each cipher number is decrypted using the RSA formula: m = c^d mod n.
                The result is converted back to characters to get the original message.
              </p>
            </section>

            <div className="next-technique">
              <p>‚û°Ô∏è Ready for the next cipher?</p>
              <Link to="/decrypt/columnar" className="next-link">
                Try Column Transport Cipher ‚Üí
              </Link>
            </div>
          </div>
        </div>

        {/* Right Output Section */}
        {finalResult && (
          <div className="right-section white-output-box">
            <h2>üîè Decrypted Output</h2>
            <p>
              <strong>Cipher Text:</strong> {cipherText}
            </p>
            <p>
              <strong>Private Key:</strong> ({privateKey.d}, {privateKey.n})
            </p>

            <h3>üß† Step-by-Step Explanation</h3>
            <ul className="step-list">
              {steps.map((step) => (
                <li key={step.id}>{step.content}</li>
              ))}
            </ul>

            <h3>‚úÖ Final Decrypted Message:</h3>
            <div className="final-encryption-box">{finalResult}</div>
            <button onClick={handleDownloadPDF} className="pdf-btn">
              üìÑ Download PDF
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default RSADecrypt;
