import React, { useState } from "react";
import { Link } from "react-router-dom";
import "./DecryptTech.css";
import bgImg from "../assets/bg2.jpg";
import jsPDF from "jspdf";
import { saveHistory } from "../utils/saveHistory";

const VigenereDecrypt = () => {
  const [ct, setCt] = useState("");
  const [key, setKey] = useState("");
  const [pt, setPt] = useState("");
  const [steps, setSteps] = useState([]);

  const handleDecrypt = (e) => {
    e.preventDefault();

    const text = ct.toUpperCase();
    const cleanKey = key.toUpperCase().replace(/[^A-Z]/g, "");
    if (!cleanKey) {
      setPt("‚ö†Ô∏è Invalid key.");
      setSteps([]);
      return;
    }

    let result = "";
    let explanationSteps = [];
    let j = 0; // index for key letters (only moves when we consume a letter)

    for (let i = 0; i < text.length; i++) {
      const ch = text[i];

      if (ch >= "A" && ch <= "Z") {
        const kLetter = cleanKey[j % cleanKey.length];
        const cPos = ch.charCodeAt(0) - 65; // 0..25
        const kShift = kLetter.charCodeAt(0) - 65; // 0..25
        const pPos = (cPos - kShift + 26) % 26;
        const pChar = String.fromCharCode(pPos + 65);

        result += pChar;
        explanationSteps.push({
          id: i + 1,
          content: `Step ${i + 1}: Take ciphertext letter "${ch}" (${cPos}).
Use key letter "${kLetter}" (${kShift}) ‚Üí subtract: ${cPos} - ${kShift} = ${
            cPos - kShift
          }.
Wrap with mod 26 ‚Üí ${pPos}. Convert to letter ‚Üí "${pChar}".`,
        });

        j++; // only advance key on letters
      } else {
        result += ch;
        explanationSteps.push({
          id: i + 1,
          content: `Step ${i + 1}: "${ch}" is not a letter ‚Üí keep it as it is.`,
        });
      }
    }
    saveHistory({
      type: "Playfair Cipher",
      action: "Decryption",
      input: ct,
      key: key,
      output: result,
    });
    setPt(result);
    setSteps(explanationSteps);
  };
  const downloadPDF = () => {
    try {
      const doc = new jsPDF();
      const pad = 12,
        lineGap = 8,
        sectionGap = 12;
      let y = 16;

      const write = (txt, size = 11, color = [0, 0, 0]) => {
        doc.setFont("helvetica", "normal");
        doc.setFontSize(size);
        doc.setTextColor(...color);
        const lines = doc.splitTextToSize(txt, 180);
        lines.forEach((line) => {
          if (y > 280) {
            doc.addPage();
            y = 16;
          }
          doc.text(line, pad, y);
          y += lineGap;
        });
      };

      const writeSectionTitle = (txt) => {
        if (y + 10 > 285) {
          doc.addPage();
          y = 16;
        }
        doc.setFont("helvetica", "bold");
        doc.setFontSize(14);
        doc.setTextColor(17, 122, 101);
        doc.text(txt, pad, y);
        y += sectionGap;
        doc.setDrawColor(17, 122, 101);
        doc.setLineWidth(0.5);
        doc.line(pad, y - 7, 200 - pad, y - 7);
      };

      const writeTag = (label, value) => {
        if (y + 8 > 285) {
          doc.addPage();
          y = 16;
        }
        doc.setFont("helvetica", "normal");
        doc.setFontSize(11);
        doc.setTextColor(90, 90, 90);
        doc.text(`${label}:`, pad, y);
        doc.setTextColor(0, 0, 0);
        doc.text(value, pad + 40, y);
        y += lineGap;
      };

      // HEADER
      doc.setDrawColor(46, 134, 193);
      doc.setFillColor(240, 248, 255);
      doc.roundedRect(pad - 4, y - 8, 200 - 2 * pad + 8, 18, 2, 2, "F");
      doc.setFontSize(16);
      doc.setTextColor(46, 134, 193);
      doc.text("Vigen√®re Cipher ‚Äî Trendy Walkthrough", pad, y + 4);
      y += 24;

      writeTag("Ciphertext", ct.toUpperCase() || "(empty)");
      writeTag("Keyword", key.toUpperCase() || "(empty)");

      writeSectionTitle("Step-by-Step Decryption");
      steps.forEach((s) => write(s.content));

      writeSectionTitle("Final Plaintext");
      write(pt || "(empty)", 14, [0, 0, 0]);

      // Footer
      if (y + 16 > 285) {
        doc.addPage();
        y = 16;
      }
      doc.setFontSize(9);
      doc.setTextColor(120, 120, 120);
      doc.text("Generated by RagaCrypt ‚Ä¢ Vigen√®re Cipher", pad, 290);

      doc.save("VigenereCipher.pdf");
    } catch (err) {
      console.error(err);
      alert("PDF generation failed. Check console for details.");
    }
  };

  return (
    <div className="cipher-page">
      <div
        className="cipher-bg"
        style={{ backgroundImage: `url(${bgImg})` }}
      ></div>
      <div className="cipher-overlay"></div>

      {/* Wrapper switches to two-column when pt exists (same as your CaesarEncrypt) */}
      <div className={`cipher-content-wrapper ${pt ? "show-output" : ""}`}>
        {/* LEFT ‚Äì keep your existing content */}
        <div className="left-section">
          <div className="cipher-content">
            <h1>üîê Vigen√®re Cipher Decryption</h1>
            <form className="cipher-form" onSubmit={handleDecrypt}>
              <input
                type="text"
                placeholder="Ciphertext"
                value={ct}
                onChange={(e) => setCt(e.target.value)}
                required
              />
              <input
                type="text"
                placeholder="Keyword"
                value={key}
                onChange={(e) => setKey(e.target.value)}
                required
              />
              <button type="submit">Decrypt</button>
            </form>

            <div className="output-section">
              <h3>üîì Plaintext</h3>
              <div className="output-box">{pt}</div>
            </div>

            <section className="explanation">
              <h3>üìö How It Works</h3>
              <p>
                Vigen√®re decryption shifts each letter <b>backward</b> using the
                repeating key. Non-letters (spaces, punctuation) are kept as
                they are.
              </p>
              <p>
                Example: keyword = <code>KEY</code>, ciphertext ={" "}
                <code>RIJVS ‚Üí HELLO</code>.
              </p>
            </section>

            <div className="next-technique">
              <Link to="/decrypt/railfence" className="next-link">
                Next: Rail Fence Decryption ‚Üí
              </Link>
            </div>
          </div>
        </div>

        {/* RIGHT ‚Äì white themed step-by-step panel */}
        {pt && (
          <div className="right-section white-output-box">
            <h2>üß† Step-by-Step Decryption</h2>
            <p>
              <strong>Ciphertext:</strong> {ct.toUpperCase()}
            </p>
            <p>
              <strong>Keyword (cleaned):</strong>{" "}
              {key.toUpperCase().replace(/[^A-Z]/g, "")}
            </p>

            <ul className="step-list">
              {steps.map((s) => (
                <li key={s.id}>{s.content}</li>
              ))}
            </ul>

            <h3>‚úÖ Final Decrypted Message:</h3>
            <div className="final-encryption-box">{pt}</div>
            <button onClick={downloadPDF} className="download-btn">
              ‚¨á Download PDF
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default VigenereDecrypt;
