import React, { useState } from "react";
import { Link } from "react-router-dom";
import "./DecryptTech.css";
import bgImg from "../assets/bg2.jpg";
import jsPDF from "jspdf";
import { saveHistory } from "../utils/saveHistory";

const MonoalphabeticDecrypt = () => {
  const [ct, setCt] = useState("");
  const [key, setKey] = useState("");
  const [pt, setPt] = useState("");
  const [steps, setSteps] = useState([]);

  const handleDecrypt = (e) => {
    e.preventDefault();

    const text = ct.toUpperCase();
    const cleanKey = key.toUpperCase().replace(/[^A-Z]/g, "");
    if (cleanKey.length !== 26) {
      alert("Key must be 26 letters (A-Z mapping).");
      return;
    }

    const alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    const map = {};
    alphabet.split("").forEach((c, i) => (map[cleanKey[i]] = c));

    let decrypted = "";
    let explanationSteps = [];

    for (let i = 0; i < text.length; i++) {
      const ch = text[i];
      if (map[ch]) {
        const pChar = map[ch];
        decrypted += pChar;
        explanationSteps.push({
          id: i + 1,
          content: `Step ${
            i + 1
          }: Cipher letter '${ch}' â†’ Plain letter '${pChar}'`,
        });
      } else {
        decrypted += ch;
      }
    }
    saveHistory({
      type: "Monoalphabatic Cipher",
      action: "Decryption",
      input: ct,
      key: key,
      output: decrypted,
    });
    setPt(decrypted);
    setSteps(explanationSteps);
  };
  const downloadPDF = () => {
    try {
      const doc = new jsPDF();
      const pad = 12;
      const lineGap = 8;
      const sectionGap = 12;
      let y = 16;

      const write = (txt, size = 11, color = [0, 0, 0]) => {
        doc.setFont("helvetica", "normal");
        doc.setFontSize(size);
        doc.setTextColor(...color);
        const lines = doc.splitTextToSize(txt, 180);
        lines.forEach((line) => {
          if (y > 280) {
            doc.addPage();
            y = 16;
          }
          doc.text(line, pad, y);
          y += lineGap;
        });
      };

      const writeSectionTitle = (txt) => {
        if (y + 10 > 285) {
          doc.addPage();
          y = 16;
        }
        doc.setFont("helvetica", "bold");
        doc.setFontSize(14);
        doc.setTextColor(17, 122, 101); // teal
        doc.text(txt, pad, y);
        y += sectionGap;
        doc.setDrawColor(17, 122, 101);
        doc.setLineWidth(0.5);
        doc.line(pad, y - 7, 200 - pad, y - 7);
      };

      const writeTag = (label, value) => {
        if (y + 8 > 285) {
          doc.addPage();
          y = 16;
        }
        doc.setFont("helvetica", "normal");
        doc.setFontSize(11);
        doc.setTextColor(90, 90, 90);
        doc.text(`${label}:`, pad, y);
        doc.setTextColor(0, 0, 0);
        doc.text(value, pad + 40, y);
        y += lineGap;
      };

      // ---------- HEADER ----------
      doc.setDrawColor(46, 134, 193);
      doc.setFillColor(240, 248, 255);
      doc.roundedRect(pad - 4, y - 8, 200 - 2 * pad + 8, 18, 2, 2, "F");
      doc.setFont("helvetica", "bold");
      doc.setFontSize(16);
      doc.setTextColor(46, 134, 193);
      doc.text("Monoalphabetic Cipher â€” Trendy Decryption", pad, y + 4);
      y += 24;

      // ---------- INPUT DETAILS ----------
      writeTag("Ciphertext", ct.toUpperCase() || "(empty)");
      writeTag("Key", key.toUpperCase() || "(empty)");

      // ---------- STEP-BY-STEP ----------
      writeSectionTitle("Step-by-Step Decryption");
      steps.forEach((step) => write(`â€¢ ${step.content}`));

      // ---------- FINAL RESULT ----------
      writeSectionTitle("Final Plaintext");
      doc.setFont("helvetica", "bold");
      doc.setFontSize(14);
      doc.setTextColor(0, 128, 0); // green
      write(pt || "â€”");

      // ---------- FOOTER ----------
      if (y + 16 > 285) {
        doc.addPage();
        y = 16;
      }
      y = 290;
      doc.setFontSize(9);
      doc.setTextColor(120, 120, 120);
      doc.text("Generated by RagaCrypt â€¢ Monoalphabetic Cipher", pad, y);

      doc.save("MonoalphabeticDecrypt.pdf");
    } catch (err) {
      console.error(err);
      alert("PDF generation failed. Check console for details.");
    }
  };
  return (
    <div className="cipher-page">
      <div
        className="cipher-bg"
        style={{ backgroundImage: `url(${bgImg})` }}
      ></div>
      <div className="cipher-overlay"></div>

      <div className="flex-layout">
        {/* LEFT PANEL */}
        <div className="left-panel">
          <div className="cipher-content">
            <h1>ðŸ”„ Monoalphabetic Cipher Decryption</h1>
            <form className="cipher-form" onSubmit={handleDecrypt}>
              <input
                type="text"
                placeholder="Ciphertext"
                value={ct}
                onChange={(e) => setCt(e.target.value)}
                required
              />
              <input
                type="text"
                placeholder="26â€‘letter Key (Aâ†’Z mapping)"
                value={key}
                onChange={(e) => setKey(e.target.value)}
                required
              />
              <button type="submit">Decrypt</button>
            </form>

            <div className="output-section">
              <h3>ðŸ”“ Plaintext</h3>
              <div className="output-box">{pt}</div>
            </div>

            <section className="explanation">
              <h3>ðŸ“š How It Works</h3>
              <p>
                Maps each letter using a fixed 1-to-1 substitution key. Reverse
                mapping recovers the original text.
              </p>
            </section>

            <div className="next-technique">
              <Link to="/decrypt/playfair" className="next-link">
                Next: Playfair Decryption â†’
              </Link>
            </div>
          </div>
        </div>

        {/* RIGHT PANEL - step-by-step explanation */}
        {steps.length > 0 && (
          <div className="right-panel">
            <h2 className="output-title">ðŸ§  Step-by-Step Decryption</h2>
            <ul className="step-list">
              {steps.map((s) => (
                <li key={s.id}>{s.content}</li>
              ))}
            </ul>
            <h3>âœ… Final Plaintext:</h3>
            <div className="final-pt">{pt}</div>
            <button onClick={downloadPDF} className="download-btn">
              â¬‡ Download PDF
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default MonoalphabeticDecrypt;
