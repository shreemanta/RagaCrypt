// src/DecryptTech/CaesarDecrypt.jsx
import React, { useState } from "react";
import { Link } from "react-router-dom";
import jsPDF from "jspdf";
import "../DecryptTech/DecryptTech.css";
import caesarBg from "../assets/bg2.jpg";

const CaesarDecrypt = () => {
  const [ciphertext, setCiphertext] = useState("");
  const [shift, setShift] = useState("");
  const [steps, setSteps] = useState([]);
  const [finalResult, setFinalResult] = useState("");

  const handleDecrypt = (e) => {
    e.preventDefault();
    const shiftAmount = parseInt(shift);
    if (isNaN(shiftAmount)) {
      setFinalResult("‚ö†Ô∏è Please enter a valid number for shift.");
      return;
    }

    let result = "";
    let explanationSteps = [];

    const upperCipher = ciphertext.toUpperCase();

    for (let i = 0; i < upperCipher.length; i++) {
      const char = upperCipher[i];

      if (char >= "A" && char <= "Z") {
        const originalPos = char.charCodeAt(0) - 65;
        const newPos = (originalPos - shiftAmount + 26) % 26;
        const newChar = String.fromCharCode(newPos + 65);
        result += newChar;

        explanationSteps.push({
          id: i + 1,
          content: `Step ${
            i + 1
          }: The letter "${char}" is at position ${originalPos} in the alphabet.
          We subtract the shift value (${shiftAmount}): ${originalPos} - ${shiftAmount} = ${
            originalPos - shiftAmount
          }.
          After taking modulo 26: ((${originalPos} - ${shiftAmount} + 26) % 26 = ${newPos}),
          we get new position ${newPos}, which is "${newChar}".`,
        });
      } else {
        result += char;
        explanationSteps.push({
          id: i + 1,
          content: `Step ${
            i + 1
          }: The character "${char}" is not a letter, so we keep it unchanged.`,
        });
      }
    }

    setFinalResult(result);
    setSteps(explanationSteps);
  };

  const downloadPDF = (ciphertext, shift, steps, finalResult) => {
    try {
      const doc = new jsPDF();
      const pad = 12;
      const lineGap = 8;
      const sectionGap = 12;
      let y = 16;

      // ---------- HELPERS ----------
      const write = (txt, size = 11, color = [0, 0, 0]) => {
        doc.setFont("helvetica", "normal");
        doc.setFontSize(size);
        doc.setTextColor(...color);
        const lines = doc.splitTextToSize(txt, 180);
        lines.forEach((line) => {
          if (y > 280) {
            doc.addPage();
            y = 16;
          }
          doc.text(line, pad, y);
          y += lineGap;
        });
      };

      const writeSectionTitle = (txt) => {
        if (y + 10 > 285) {
          doc.addPage();
          y = 16;
        }
        doc.setFont("helvetica", "bold");
        doc.setFontSize(14);
        doc.setTextColor(17, 122, 101); // teal
        doc.text(txt, pad, y);
        y += sectionGap;
        doc.setDrawColor(17, 122, 101);
        doc.setLineWidth(0.5);
        doc.line(pad, y - 7, 200 - pad, y - 7);
      };

      const writeTag = (label, value) => {
        if (y + 8 > 285) {
          doc.addPage();
          y = 16;
        }
        doc.setFont("helvetica", "normal");
        doc.setFontSize(11);
        doc.setTextColor(90, 90, 90);
        doc.text(`${label}:`, pad, y);
        doc.setTextColor(0, 0, 0);
        doc.text(value, pad + 28, y);
        y += lineGap;
      };

      // ---------- HEADER ----------
      doc.setDrawColor(46, 134, 193);
      doc.setFillColor(240, 248, 255);
      doc.roundedRect(pad - 4, y - 8, 200 - 2 * pad + 8, 18, 2, 2, "F");
      doc.setFont("helvetica", "bold");
      doc.setFontSize(16);
      doc.setTextColor(46, 134, 193);
      doc.text("Caesar Cipher ‚Äî Trendy Decryption", pad, y + 4);
      y += 24;

      // ---------- INPUT DETAILS ----------
      writeTag("Ciphertext", ciphertext.toUpperCase() || "(empty)");
      writeTag("Shift Key", shift || "(empty)");

      // ---------- STEP-BY-STEP ----------
      writeSectionTitle("Step-by-Step Decryption");
      steps.forEach((step, idx) => {
        write(`‚Ä¢ ${step.content}`);
      });

      // ---------- FINAL RESULT ----------
      writeSectionTitle("Final Decrypted Message");
      doc.setFont("helvetica", "bold");
      doc.setFontSize(14);
      doc.setTextColor(0, 128, 0); // green like Hill Cipher
      write(finalResult || "‚Äî");

      // ---------- FOOTER ----------
      if (y + 16 > 285) {
        doc.addPage();
        y = 16;
      }
      y = 290;
      doc.setFontSize(9);
      doc.setTextColor(120, 120, 120);
      doc.text("Generated by RagaCrypt ‚Ä¢ Caesar Cipher", pad, y);

      // ---------- SAVE ----------
      doc.save("CaesarDecrypt.pdf");
    } catch (err) {
      console.error("PDF generation failed:", err);
      alert("PDF generation failed. Check console for details.");
    }
  };

  return (
    <div className="cipher-page">
      <div
        className="cipher-bg"
        style={{ backgroundImage: `url(${caesarBg})` }}
      ></div>
      <div className="cipher-overlay"></div>

      <div
        className={`cipher-content-wrapper ${finalResult ? "show-output" : ""}`}
      >
        {/* Left Input Section */}
        <div className="left-section">
          <div className="cipher-content">
            <h1>üßÆ Caesar Cipher Decryption</h1>
            <p>
              Caesar Decryption works by shifting every letter <b>backward</b>{" "}
              in the alphabet using the same shift key. Spaces and punctuation
              remain unchanged.
            </p>

            <form onSubmit={handleDecrypt} className="cipher-form">
              <input
                type="text"
                placeholder="Enter Ciphertext"
                value={ciphertext}
                onChange={(e) => setCiphertext(e.target.value)}
                required
              />
              <input
                type="number"
                placeholder="Enter Shift Key (e.g. 3)"
                value={shift}
                onChange={(e) => setShift(e.target.value)}
                required
              />
              <button type="submit">Decrypt Message</button>
            </form>

            <section className="explanation">
              <h3>üìö How It Works</h3>
              <p>
                Each letter is moved backward by the shift key. If we go before
                'A', we wrap around to 'Z'.
              </p>
              <p>
                Example with shift = 3:
                <br />
                <code>KHOOR ‚Üí HELLO</code>
              </p>
            </section>

            <div className="next-technique">
              <p>‚û°Ô∏è Ready for the next cipher?</p>
              <Link to="/decrypt/vigenere" className="next-link">
                Try Vigen√®re Decryption ‚Üí
              </Link>
            </div>
          </div>
        </div>

        {/* Right Output Section */}
        {finalResult && (
          <div className="right-section white-output-box">
            <h2>üîì Decrypted Output</h2>
            <p>
              <strong>Ciphertext:</strong> {ciphertext.toUpperCase()}
            </p>
            <p>
              <strong>Shift Key:</strong> {shift}
            </p>

            <h3>üß† Step-by-Step Explanation</h3>
            <ul className="step-list">
              {steps.map((step) => (
                <li key={step.id}>{step.content}</li>
              ))}
            </ul>

            <h3>‚úÖ Final Decrypted Message:</h3>
            <div className="final-encryption-box">{finalResult}</div>
            <button
              onClick={() => downloadPDF(ciphertext, shift, steps, finalResult)}
            >
             ‚¨á Download PDF
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default CaesarDecrypt;
