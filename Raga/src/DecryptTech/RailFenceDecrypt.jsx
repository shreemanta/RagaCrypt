import React, { useState } from "react";
import { Link } from "react-router-dom";
import "./DecryptTech.css";
import bgImg from "../assets/bg2.jpg";
import jsPDF from "jspdf";

const RailFenceDecrypt = () => {
  const [ct, setCt] = useState("");
  const [rails, setRails] = useState(2);
  const [pt, setPt] = useState("");
  const [steps, setSteps] = useState([]);

  const decrypt = (text, key) => {
    if (key < 2) return text;

    let explanation = [];
    explanation.push(`Step 1: Ciphertext = "${text}"`);
    explanation.push(`Step 2: Number of rails = ${key}`);

    const arr = Array.from({ length: key }, () => []);
    let dir = false,
      r = 0;

    // Step 3: Mark zigzag positions
    for (let i = 0; i < text.length; i++) {
      arr[r].push(null);
      explanation.push(`Placing placeholder at rail ${r}, column ${i}`);
      dir = r === 0 || r === key - 1 ? !dir : dir;
      r += dir ? 1 : -1;
    }

    // Step 4: Fill ciphertext row by row
    let idx = 0;
    arr.forEach((row, ri) =>
      row.forEach((_, i, a) => {
        a[i] = text[idx++];
        explanation.push(`Filling rail ${ri}, position ${i} with "${a[i]}"`);
      })
    );

    // Step 5: Read zigzag to reconstruct plaintext
    dir = false;
    r = 0;
    const result = Array.from({ length: text.length }, (_, i) => {
      const ch = arr[r].shift();
      explanation.push(`Reading "${ch}" from rail ${r}, column ${i}`);
      dir = r === 0 || r === key - 1 ? !dir : dir;
      r += dir ? 1 : -1;
      return ch;
    }).join("");

    explanation.push(`âœ… Final Plaintext = "${result}"`);
    setSteps(explanation);

    return result;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    setPt(decrypt(ct, parseInt(rails)));
  };
  const downloadPDF = () => {
    try {
      const doc = new jsPDF();
      const pad = 12;
      const lineGap = 8;
      const sectionGap = 12;
      let y = 16;

      const write = (txt, size = 11, color = [0, 0, 0]) => {
        doc.setFont("helvetica", "normal");
        doc.setFontSize(size);
        doc.setTextColor(...color);
        const lines = doc.splitTextToSize(txt, 180);
        lines.forEach((line) => {
          if (y > 280) {
            doc.addPage();
            y = 16;
          }
          doc.text(line, pad, y);
          y += lineGap;
        });
      };

      const writeSectionTitle = (txt) => {
        if (y + 10 > 285) {
          doc.addPage();
          y = 16;
        }
        doc.setFont("helvetica", "bold");
        doc.setFontSize(14);
        doc.setTextColor(17, 122, 101); // teal
        doc.text(txt, pad, y);
        y += sectionGap;
        doc.setDrawColor(17, 122, 101);
        doc.setLineWidth(0.5);
        doc.line(pad, y - 7, 200 - pad, y - 7);
      };

      const writeTag = (label, value) => {
        if (y + 8 > 285) {
          doc.addPage();
          y = 16;
        }
        doc.setFont("helvetica", "normal");
        doc.setFontSize(11);
        doc.setTextColor(90, 90, 90);
        doc.text(`${label}:`, pad, y);
        doc.setTextColor(0, 0, 0);
        doc.text(value, pad + 40, y);
        y += lineGap;
      };

      // ---------- HEADER ----------
      doc.setDrawColor(46, 134, 193);
      doc.setFillColor(240, 248, 255);
      doc.roundedRect(pad - 4, y - 8, 200 - 2 * pad + 8, 18, 2, 2, "F");
      doc.setFont("helvetica", "bold");
      doc.setFontSize(16);
      doc.setTextColor(46, 134, 193);
      doc.text("Rail Fence Cipher â€” Trendy Decryption", pad, y + 4);
      y += 24;

      // ---------- INPUT DETAILS ----------
      writeTag("Ciphertext", ct.toUpperCase() || "(empty)");
      writeTag("Number of Rails", rails || "(empty)");

      // ---------- STEP-BY-STEP ----------
      writeSectionTitle("Step-by-Step Decryption");
      steps.forEach((step) => write(`â€¢ ${step}`));

      // ---------- FINAL RESULT ----------
      writeSectionTitle("Final Plaintext");
      doc.setFont("helvetica", "bold");
      doc.setFontSize(14);
      doc.setTextColor(0, 128, 0); // green
      write(pt || "â€”");

      // ---------- FOOTER ----------
      if (y + 16 > 285) {
        doc.addPage();
        y = 16;
      }
      y = 290;
      doc.setFontSize(9);
      doc.setTextColor(120, 120, 120);
      doc.text("Generated by RagaCrypt â€¢ Rail Fence Cipher", pad, y);

      doc.save("RailFenceDecrypt.pdf");
    } catch (err) {
      console.error(err);
      alert("PDF generation failed. Check console for details.");
    }
  };
  return (
    <div className="cipher-page">
      <div
        className="cipher-bg"
        style={{ backgroundImage: `url(${bgImg})` }}
      ></div>
      <div className="cipher-overlay"></div>

      {/* Two-column layout */}
      <div className="two-column">
        {/* LEFT SIDE */}
        <div className="cipher-content left-panel">
          <h1>ðŸš‚ Rail Fence Cipher Decryption</h1>
          <form className="cipher-form" onSubmit={handleSubmit}>
            <input
              type="text"
              placeholder="Ciphertext"
              value={ct}
              onChange={(e) => setCt(e.target.value)}
              required
            />
            <input
              type="number"
              placeholder="Number of Rails"
              value={rails}
              onChange={(e) => setRails(e.target.value)}
              required
            />
            <button type="submit">Decrypt</button>
          </form>

          <div className="output-section">
            <h3>ðŸ”“ Plaintext</h3>
            <div className="output-box">{pt}</div>
          </div>

          <section className="explanation">
            <h3>ðŸ“š How It Works</h3>
            <p>
              Rail Fence decryption reconstructs the zigzag pattern and reads it
              row-by-row to recover the message.
            </p>
          </section>

          <div className="next-technique">
            <Link to="/decrypt/monoalphabetic" className="next-link">
              Next: Monoalphabetic Decryption â†’
            </Link>
          </div>
        </div>

        {/* RIGHT SIDE */}
        {steps.length > 0 && (
          <div className="right-panel white-output-box">
            <h2 className="output-title">ðŸ§  Step-by-Step Explanation</h2>
            <div className="output-white">
              <div className="final-pt">Final Plaintext: {pt}</div>
              <ul className="step-list">
                {steps.map((s, i) => (
                  <li key={i}>{s}</li>
                ))}
              </ul>
            </div>
            <button onClick={downloadPDF} className="download-btn">
              â¬‡ Download PDF
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default RailFenceDecrypt;
